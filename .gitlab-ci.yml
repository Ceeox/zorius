stages:
  - build
  - deploy

variables:
  CARGO_HOME: $CI_PROJECT_DIR/.cargo

rust-latest:
  stage: build
  image: rust:latest
  cache:
    key: $CI_JOB_NAME
    paths:
      - .cargo
      - target
  before_script:
    - rustup component add rustfmt
    - rustup component add clippy
  script:
    - cargo build --color always
    - cargo fmt -- --check --color always
    - cargo test --all-features --color always

rust-security:
  stage: build
  image: rust:latest
  cache:
    key: $CI_JOB_NAME
    paths:
      - .cargo
      - target
  before_script:
    - cargo install cargo-audit
  script:
    - cargo audit -D warnings $CARGO_AUDIT
  allow_failure: true

docker:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  rules:
    - exists:
        - Dockerfile
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:latest

pages:
  stage: deploy
  image: rustlang/rust:nightly
  before_script:
    - mkdir -p public
  script:
    - cargo rustdoc --all-features
    - mv target/doc/* public/
  artifacts:
    paths:
      - public
  only:
    - master
